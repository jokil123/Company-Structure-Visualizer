(()=>{"use strict";var t={800:(t,n,e)=>{e.d(n,{Z:()=>u});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([t.id,"body{font-family:Calibri;margin:0;overflow:hidden}svg{user-select:none}","",{version:3,sources:["webpack://./src/index.scss"],names:[],mappings:"AAAA,KACE,mBAAA,CACA,QAAA,CACA,eAAA,CAGF,IACE,gBAAA",sourcesContent:["body {\r\n  font-family: Calibri;\r\n  margin: 0;\r\n  overflow: hidden;\r\n}\r\n\r\nsvg {\r\n  user-select: none;\r\n}\r\n"],sourceRoot:""}]);const u=a},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var u=0;u<this.length;u++){var s=this[u][0];null!=s&&(a[s]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),n.push(c))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(t," */")}));return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var o={},a=[],u=0;u<t.length;u++){var s=t[u],l=r.base?s[0]+r.base:s[0],c=o[l]||0,f="".concat(l," ").concat(c);o[l]=c+1;var h=e(f),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)n[h].references++,n[h].updater(p);else{var d=i(p,r);r.byIndex=u,n.splice(u,0,{identifier:f,updater:d,references:1})}a.push(f)}return a}function i(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var u=e(o[a]);n[u].references--}for(var s=r(t,i),l=0;l<o.length;l++){var c=e(o[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=s}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},233:(t,n,e)=>{function r(){}function i(t){return null==t?r:function(){return this.querySelector(t)}}function o(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function a(){return[]}function u(t){return null==t?a:function(){return this.querySelectorAll(t)}}function s(t){return function(){return this.matches(t)}}function l(t){return function(n){return n.matches(t)}}var c=Array.prototype.find;function f(){return this.firstElementChild}var h=Array.prototype.filter;function p(){return Array.from(this.children)}function d(t){return new Array(t.length)}function v(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function y(t){return function(){return t}}function m(t,n,e,r,i,o){for(var a,u=0,s=n.length,l=o.length;u<l;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new v(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function g(t,n,e,r,i,o,a){var u,s,l,c=new Map,f=n.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(p[u]=l=a.call(s,s.__data__,u,n)+"",c.has(l)?i[u]=s:c.set(l,s));for(u=0;u<h;++u)l=a.call(t,o[u],u,o)+"",(s=c.get(l))?(r[u]=s,s.__data__=o[u],c.delete(l)):e[u]=new v(t,o[u]);for(u=0;u<f;++u)(s=n[u])&&c.get(p[u])===s&&(i[u]=s)}function w(t){return t.__data__}function _(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function b(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}v.prototype={constructor:v,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var x="http://www.w3.org/1999/xhtml";const A={svg:"http://www.w3.org/2000/svg",xhtml:x,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function M(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),A.hasOwnProperty(n)?{space:A[n],local:t}:t}function k(t){return function(){this.removeAttribute(t)}}function N(t){return function(){this.removeAttributeNS(t.space,t.local)}}function S(t,n){return function(){this.setAttribute(t,n)}}function E(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function $(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function O(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function j(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function C(t){return function(){this.style.removeProperty(t)}}function z(t,n,e){return function(){this.style.setProperty(t,n,e)}}function q(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function B(t,n){return t.style.getPropertyValue(n)||j(t).getComputedStyle(t,null).getPropertyValue(n)}function I(t){return function(){delete this[t]}}function R(t,n){return function(){this[t]=n}}function X(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function P(t){return t.trim().split(/^|\s+/)}function T(t){return t.classList||new L(t)}function L(t){this._node=t,this._names=P(t.getAttribute("class")||"")}function H(t,n){for(var e=T(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function F(t,n){for(var e=T(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function D(t){return function(){H(this,t)}}function U(t){return function(){F(this,t)}}function Y(t,n){return function(){(n.apply(this,arguments)?H:F)(this,t)}}function V(){this.textContent=""}function Z(t){return function(){this.textContent=t}}function J(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function W(){this.innerHTML=""}function G(t){return function(){this.innerHTML=t}}function K(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Q(){this.nextSibling&&this.parentNode.appendChild(this)}function tt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function nt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===x&&n.documentElement.namespaceURI===x?n.createElement(t):n.createElementNS(e,t)}}function et(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function rt(t){var n=M(t);return(n.local?et:nt)(n)}function it(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function at(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function ut(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function st(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function lt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function ct(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,u=i.length;a<u;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function ft(t,n,e){var r=j(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function ht(t,n){return function(){return ft(this,t,n)}}function pt(t,n){return function(){return ft(this,t,n.apply(this,arguments))}}L.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var dt=[null];function vt(t,n){this._groups=t,this._parents=n}function yt(){return new vt([[document.documentElement]],dt)}vt.prototype=yt.prototype={constructor:vt,select:function(t){"function"!=typeof t&&(t=i(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var a,u,s=n[o],l=s.length,c=r[o]=new Array(l),f=0;f<l;++f)(a=s[f])&&(u=t.call(a,a.__data__,f,s))&&("__data__"in a&&(u.__data__=a.__data__),c[f]=u);return new vt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return o(t.apply(this,arguments))}}(t):u(t);for(var n=this._groups,e=n.length,r=[],i=[],a=0;a<e;++a)for(var s,l=n[a],c=l.length,f=0;f<c;++f)(s=l[f])&&(r.push(t.call(s,s.__data__,f,l)),i.push(s));return new vt(r,i)},selectChild:function(t){return this.select(null==t?f:function(t){return function(){return c.call(this.children,t)}}("function"==typeof t?t:l(t)))},selectChildren:function(t){return this.selectAll(null==t?p:function(t){return function(){return h.call(this.children,t)}}("function"==typeof t?t:l(t)))},filter:function(t){"function"!=typeof t&&(t=s(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,l=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&l.push(o);return new vt(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,w);var e=n?g:m,r=this._parents,i=this._groups;"function"!=typeof t&&(t=y(t));for(var o=i.length,a=new Array(o),u=new Array(o),s=new Array(o),l=0;l<o;++l){var c=r[l],f=i[l],h=f.length,p=_(t.call(c,c&&c.__data__,l,r)),d=p.length,v=u[l]=new Array(d),b=a[l]=new Array(d),x=s[l]=new Array(h);e(c,f,v,b,x,p,n);for(var A,M,k=0,N=0;k<d;++k)if(A=v[k]){for(k>=N&&(N=k+1);!(M=b[N])&&++N<d;);A._next=M||null}}return(a=new vt(a,r))._enter=u,a._exit=s,a},enter:function(){return new vt(this._enter||this._groups.map(d),this._parents)},exit:function(){return new vt(this._exit||this._groups.map(d),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,a=Math.min(i,o),u=new Array(i),s=0;s<a;++s)for(var l,c=e[s],f=r[s],h=c.length,p=u[s]=new Array(h),d=0;d<h;++d)(l=c[d]||f[d])&&(p[d]=l);for(;s<i;++s)u[s]=e[s];return new vt(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=b);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,l=i[o]=new Array(s),c=0;c<s;++c)(a=u[c])&&(l[c]=a);l.sort(n)}return new vt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=M(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?N:k:"function"==typeof n?e.local?O:$:e.local?E:S)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?C:"function"==typeof n?q:z)(t,n,null==e?"":e)):B(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?I:"function"==typeof n?X:R)(t,n)):this.node()[t]},classed:function(t,n){var e=P(t+"");if(arguments.length<2){for(var r=T(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Y:n?D:U)(e,n))},text:function(t){return arguments.length?this.each(null==t?V:("function"==typeof t?J:Z)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?W:("function"==typeof t?K:G)(t)):this.node().innerHTML},raise:function(){return this.each(Q)},lower:function(){return this.each(tt)},append:function(t){var n="function"==typeof t?t:rt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:rt(t),r=null==n?it:"function"==typeof n?n:i(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?ut:at)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=st(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?ct:lt,r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?pt:ht)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const mt=yt;var gt={value:()=>{}};function wt(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new _t(r)}function _t(t){this._=t}function bt(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function xt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function At(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=gt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}_t.prototype=wt.prototype={constructor:_t,on:function(t,n){var e,r=this._,i=bt(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=At(r[e],t.name,n);else if(null==n)for(e in r)r[e]=At(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=xt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new _t(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const Mt=wt;var kt,Nt,St=0,Et=0,$t=0,Ot=0,jt=0,Ct=0,zt="object"==typeof performance&&performance.now?performance:Date,qt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Bt(){return jt||(qt(It),jt=zt.now()+Ct)}function It(){jt=0}function Rt(){this._call=this._time=this._next=null}function Xt(t,n,e){var r=new Rt;return r.restart(t,n,e),r}function Pt(){jt=(Ot=zt.now())+Ct,St=Et=0;try{!function(){Bt(),++St;for(var t,n=kt;n;)(t=jt-n._time)>=0&&n._call.call(void 0,t),n=n._next;--St}()}finally{St=0,function(){for(var t,n,e=kt,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:kt=n);Nt=t,Lt(r)}(),jt=0}}function Tt(){var t=zt.now(),n=t-Ot;n>1e3&&(Ct-=n,Ot=t)}function Lt(t){St||(Et&&(Et=clearTimeout(Et)),t-jt>24?(t<1/0&&(Et=setTimeout(Pt,t-zt.now()-Ct)),$t&&($t=clearInterval($t))):($t||(Ot=zt.now(),$t=setInterval(Tt,1e3)),St=1,qt(Pt)))}function Ht(t,n,e){var r=new Rt;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}Rt.prototype=Xt.prototype={constructor:Rt,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Bt():+e)+(null==n?0:+n),this._next||Nt===this||(Nt?Nt._next=this:kt=this,Nt=this),this._call=t,this._time=e,Lt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Lt())}};var Ft=Mt("start","end","cancel","interrupt"),Dt=[];function Ut(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var l,c,f,h;if(1!==e.state)return u();for(l in i)if((h=i[l]).name===e.name){if(3===h.state)return Ht(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[l])}if(Ht((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),l=0,c=-1;l<f;++l)(h=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=h);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Xt((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Ft,tween:Dt,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Yt(t,n){var e=Zt(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Vt(t,n){var e=Zt(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Zt(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Jt(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var Wt,Gt=180/Math.PI,Kt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Qt(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Gt,skewX:Math.atan(s)*Gt,scaleX:a,scaleY:u}}function tn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:Jt(t,i)},{i:s-2,x:Jt(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Jt(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Jt(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,s),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Jt(t,e)},{i:u-2,x:Jt(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var nn=tn((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?Kt:Qt(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),en=tn((function(t){return null==t?Kt:(Wt||(Wt=document.createElementNS("http://www.w3.org/2000/svg","g")),Wt.setAttribute("transform",t),(t=Wt.transform.baseVal.consolidate())?Qt((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Kt)}),", ",")",")");function rn(t,n){var e,r;return function(){var i=Vt(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function on(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Vt(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}o.tween=i}}function an(t,n,e){var r=t._id;return t.each((function(){var t=Vt(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Zt(t,r).value[n]}}function un(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function sn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function ln(){}var cn=.7,fn=1/cn,hn="\\s*([+-]?\\d+)\\s*",pn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",dn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",vn=/^#([0-9a-f]{3,8})$/,yn=new RegExp("^rgb\\("+[hn,hn,hn]+"\\)$"),mn=new RegExp("^rgb\\("+[dn,dn,dn]+"\\)$"),gn=new RegExp("^rgba\\("+[hn,hn,hn,pn]+"\\)$"),wn=new RegExp("^rgba\\("+[dn,dn,dn,pn]+"\\)$"),_n=new RegExp("^hsl\\("+[pn,dn,dn]+"\\)$"),bn=new RegExp("^hsla\\("+[pn,dn,dn,pn]+"\\)$"),xn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function An(){return this.rgb().formatHex()}function Mn(){return this.rgb().formatRgb()}function kn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=vn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Nn(n):3===e?new On(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Sn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Sn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=yn.exec(t))?new On(n[1],n[2],n[3],1):(n=mn.exec(t))?new On(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=gn.exec(t))?Sn(n[1],n[2],n[3],n[4]):(n=wn.exec(t))?Sn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=_n.exec(t))?qn(n[1],n[2]/100,n[3]/100,1):(n=bn.exec(t))?qn(n[1],n[2]/100,n[3]/100,n[4]):xn.hasOwnProperty(t)?Nn(xn[t]):"transparent"===t?new On(NaN,NaN,NaN,0):null}function Nn(t){return new On(t>>16&255,t>>8&255,255&t,1)}function Sn(t,n,e,r){return r<=0&&(t=n=e=NaN),new On(t,n,e,r)}function En(t){return t instanceof ln||(t=kn(t)),t?new On((t=t.rgb()).r,t.g,t.b,t.opacity):new On}function $n(t,n,e,r){return 1===arguments.length?En(t):new On(t,n,e,null==r?1:r)}function On(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function jn(){return"#"+zn(this.r)+zn(this.g)+zn(this.b)}function Cn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function zn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function qn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new In(t,n,e,r)}function Bn(t){if(t instanceof In)return new In(t.h,t.s,t.l,t.opacity);if(t instanceof ln||(t=kn(t)),!t)return new In;if(t instanceof In)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new In(a,u,s,t.opacity)}function In(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Rn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Xn(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}un(ln,kn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:An,formatHex:An,formatHsl:function(){return Bn(this).formatHsl()},formatRgb:Mn,toString:Mn}),un(On,$n,sn(ln,{brighter:function(t){return t=null==t?fn:Math.pow(fn,t),new On(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?cn:Math.pow(cn,t),new On(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:jn,formatHex:jn,formatRgb:Cn,toString:Cn})),un(In,(function(t,n,e,r){return 1===arguments.length?Bn(t):new In(t,n,e,null==r?1:r)}),sn(ln,{brighter:function(t){return t=null==t?fn:Math.pow(fn,t),new In(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?cn:Math.pow(cn,t),new In(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new On(Rn(t>=240?t-240:t+120,i,r),Rn(t,i,r),Rn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Pn=t=>()=>t;function Tn(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):Pn(isNaN(t)?n:t)}const Ln=function t(n){var e=function(t){return 1==(t=+t)?Tn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Pn(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=$n(t)).r,(n=$n(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=Tn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Hn(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=$n(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}Hn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return Xn((e-r/n)*n,a,i,o,u)}})),Hn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return Xn((e-r/n)*n,i,o,a,u)}}));var Fn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Dn=new RegExp(Fn.source,"g");function Un(t,n){var e,r,i,o=Fn.lastIndex=Dn.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=Fn.exec(t))&&(r=Dn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Jt(e,r)})),o=Dn.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}function Yn(t,n){var e;return("number"==typeof n?Jt:n instanceof kn?Ln:(e=kn(n))?(n=e,Ln):Un)(t,n)}function Vn(t){return function(){this.removeAttribute(t)}}function Zn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Jn(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function Wn(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function Gn(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttribute(t)}}function Kn(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}function Qn(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function te(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function ne(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&te(t,i)),e}return i._value=n,i}function ee(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Qn(t,i)),e}return i._value=n,i}function re(t,n){return function(){Yt(this,t).delay=+n.apply(this,arguments)}}function ie(t,n){return n=+n,function(){Yt(this,t).delay=n}}function oe(t,n){return function(){Vt(this,t).duration=+n.apply(this,arguments)}}function ae(t,n){return n=+n,function(){Vt(this,t).duration=n}}function ue(t,n){if("function"!=typeof n)throw new Error;return function(){Vt(this,t).ease=n}}function se(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Yt:Vt;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var le=mt.prototype.constructor;function ce(t){return function(){this.style.removeProperty(t)}}function fe(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function he(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&fe(t,o,e)),r}return o._value=n,o}function pe(t){return function(n){this.textContent=t.call(this,n)}}function de(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&pe(r)),n}return r._value=t,r}var ve=0;function ye(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function me(){return++ve}var ge=mt.prototype;ye.prototype=function(t){return mt().transition(t)}.prototype={constructor:ye,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=i(t));for(var r=this._groups,o=r.length,a=new Array(o),u=0;u<o;++u)for(var s,l,c=r[u],f=c.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=c[p])&&(l=t.call(s,s.__data__,p,c))&&("__data__"in s&&(l.__data__=s.__data__),h[p]=l,Ut(h[p],n,e,p,h,Zt(s,e)));return new ye(a,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=u(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,c=r[s],f=c.length,h=0;h<f;++h)if(l=c[h]){for(var p,d=t.call(l,l.__data__,h,c),v=Zt(l,e),y=0,m=d.length;y<m;++y)(p=d[y])&&Ut(p,n,e,y,d,v);o.push(d),a.push(l)}return new ye(o,a,n,e)},selectChild:ge.selectChild,selectChildren:ge.selectChildren,filter:function(t){"function"!=typeof t&&(t=s(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,l=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&l.push(o);return new ye(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],f=l.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new ye(a,this._parents,this._name,this._id)},selection:function(){return new le(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=me(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)if(a=u[l]){var c=Zt(a,n);Ut(a,t,e,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new ye(r,this._parents,t,e)},call:ge.call,nodes:ge.nodes,node:ge.node,size:ge.size,empty:ge.empty,each:ge.each,on:function(t,n){var e=this._id;return arguments.length<2?Zt(this.node(),e).on.on(t):this.each(se(e,t,n))},attr:function(t,n){var e=M(t),r="transform"===e?en:Yn;return this.attrTween(t,"function"==typeof n?(e.local?Kn:Gn)(e,r,an(this,"attr."+t,n)):null==n?(e.local?Zn:Vn)(e):(e.local?Wn:Jn)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=M(t);return this.tween(e,(r.local?ne:ee)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?nn:Yn;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=B(this,t),a=(this.style.removeProperty(t),B(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,ce(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=B(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=B(this,t)),a===s?null:a===r&&s===i?o:(i=s,o=n(r=a,u))}}(t,r,an(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var s=Vt(this,t),l=s.on,c=null==s.value[a]?o||(o=ce(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(u,i=c),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=B(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,he(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(an(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,de(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Zt(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?rn:on)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?re:ie)(n,t)):Zt(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?oe:ae)(n,t)):Zt(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(ue(n,t)):Zt(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;Vt(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},s={value:function(){0==--i&&o()}};e.each((function(){var e=Vt(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:ge[Symbol.iterator]};var we={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function _e(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}mt.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},mt.prototype.transition=function(t){var n,e;t instanceof ye?(n=t._id,t=t._name):(n=me(),(e=we).time=Bt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)(a=u[l])&&Ut(a,t,n,l,u,e||_e(a,n));return new ye(r,this._parents,t,n)};const{abs:be,max:xe,min:Ae}=Math;function Me(t){return{type:t}}function ke(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Ne(t,n){t instanceof Map?(t=[void 0,t],void 0===n&&(n=Ee)):void 0===n&&(n=Se);for(var e,r,i,o,a,u=new je(t),s=[u];e=s.pop();)if((i=n(e.data))&&(a=(i=Array.from(i)).length))for(e.children=i,o=a-1;o>=0;--o)s.push(r=i[o]=new je(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(Oe)}function Se(t){return t.children}function Ee(t){return Array.isArray(t)?t[1]:null}function $e(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function Oe(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function je(t){this.data=t,this.depth=this.height=0,this.parent=null}function Ce(t,n){var e,r;if(Be(n,t))return[n];for(e=0;e<t.length;++e)if(ze(n,t[e])&&Be(Re(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(ze(Re(t[e],t[r]),n)&&ze(Re(t[e],n),t[r])&&ze(Re(t[r],n),t[e])&&Be(Xe(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function ze(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function qe(t,n){var e=t.r-n.r+1e-9*Math.max(t.r,n.r,1),r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Be(t,n){for(var e=0;e<n.length;++e)if(!qe(t,n[e]))return!1;return!0}function Ie(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return Re(t[0],t[1]);case 3:return Xe(t[0],t[1],t[2])}var n}function Re(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,a=n.y,u=n.r,s=o-e,l=a-r,c=u-i,f=Math.sqrt(s*s+l*l);return{x:(e+o+s/f*c)/2,y:(r+a+l/f*c)/2,r:(f+i+u)/2}}function Xe(t,n,e){var r=t.x,i=t.y,o=t.r,a=n.x,u=n.y,s=n.r,l=e.x,c=e.y,f=e.r,h=r-a,p=r-l,d=i-u,v=i-c,y=s-o,m=f-o,g=r*r+i*i-o*o,w=g-a*a-u*u+s*s,_=g-l*l-c*c+f*f,b=p*d-h*v,x=(d*_-v*w)/(2*b)-r,A=(v*y-d*m)/b,M=(p*w-h*_)/(2*b)-i,k=(h*m-p*y)/b,N=A*A+k*k-1,S=2*(o+x*A+M*k),E=x*x+M*M-o*o,$=-(N?(S+Math.sqrt(S*S-4*N*E))/(2*N):E/S);return{x:r+x+A*$,y:i+M+k*$,r:$}}function Pe(t,n,e){var r,i,o,a,u=t.x-n.x,s=t.y-n.y,l=u*u+s*s;l?(i=n.r+e.r,i*=i,a=t.r+e.r,i>(a*=a)?(r=(l+a-i)/(2*l),o=Math.sqrt(Math.max(0,a/l-r*r)),e.x=t.x-r*u-o*s,e.y=t.y-r*s+o*u):(r=(l+i-a)/(2*l),o=Math.sqrt(Math.max(0,i/l-r*r)),e.x=n.x+r*u-o*s,e.y=n.y+r*s+o*u)):(e.x=n.x+e.r,e.y=n.y)}function Te(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Le(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function He(t){this._=t,this.next=null,this.previous=null}function Fe(t){if(!(o=(n=t,t="object"==typeof n&&"length"in n?n:Array.from(n)).length))return 0;var n,e,r,i,o,a,u,s,l,c,f,h;if((e=t[0]).x=0,e.y=0,!(o>1))return e.r;if(r=t[1],e.x=-r.r,r.x=e.r,r.y=0,!(o>2))return e.r+r.r;Pe(r,e,i=t[2]),e=new He(e),r=new He(r),i=new He(i),e.next=i.previous=r,r.next=e.previous=i,i.next=r.previous=e;t:for(s=3;s<o;++s){Pe(e._,r._,i=t[s]),i=new He(i),l=r.next,c=e.previous,f=r._.r,h=e._.r;do{if(f<=h){if(Te(l._,i._)){r=l,e.next=r,r.previous=e,--s;continue t}f+=l._.r,l=l.next}else{if(Te(c._,i._)){(e=c).next=r,r.previous=e,--s;continue t}h+=c._.r,c=c.previous}}while(l!==c.next);for(i.previous=e,i.next=r,e.next=r.previous=r=i,a=Le(e);(i=i.next)!==r;)(u=Le(i))<a&&(e=i,a=u);r=e.next}for(e=[r._],i=r;(i=i.next)!==r;)e.push(i._);for(i=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Array.from(t))).length,o=[];r<i;)n=t[r],e&&qe(e,n)?++r:(e=Ie(o=Ce(o,n)),r=0);return e}(e),s=0;s<o;++s)(e=t[s]).x-=i.x,e.y-=i.y;return i.r}function De(t){return null==t?null:function(t){if("function"!=typeof t)throw new Error;return t}(t)}function Ue(){return 0}function Ye(t){return function(){return t}}function Ve(t){return Math.sqrt(t.value)}function Ze(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function Je(t,n){return function(e){if(r=e.children){var r,i,o,a=r.length,u=t(e)*n||0;if(u)for(i=0;i<a;++i)r[i].r+=u;if(o=Fe(r),u)for(i=0;i<a;++i)r[i].r-=u;e.r=o+u}}}function We(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function Ge(t,n,e){this.k=t,this.x=n,this.y=e}["w","e"].map(Me),["n","s"].map(Me),["n","w","e","s","nw","ne","sw","se"].map(Me),je.prototype=Ne.prototype={constructor:je,count:function(){return this.eachAfter(ke)},each:function(t,n){let e=-1;for(const r of this)t.call(n,r,++e,this);return this},eachAfter:function(t,n){for(var e,r,i,o=this,a=[o],u=[],s=-1;o=a.pop();)if(u.push(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r]);for(;o=u.pop();)t.call(n,o,++s,this);return this},eachBefore:function(t,n){for(var e,r,i=this,o=[i],a=-1;i=o.pop();)if(t.call(n,i,++a,this),e=i.children)for(r=e.length-1;r>=0;--r)o.push(e[r]);return this},find:function(t,n){let e=-1;for(const r of this)if(t.call(n,r,++e,this))return r},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){return Array.from(this)},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return Ne(this).eachBefore($e)},[Symbol.iterator]:function*(){var t,n,e,r,i=this,o=[i];do{for(t=o.reverse(),o=[];i=t.pop();)if(yield i,n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e])}while(o.length)}},Ge.prototype={constructor:Ge,scale:function(t){return 1===t?this:new Ge(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Ge(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Ge(1,0,0),Ge.prototype;const Ke=JSON.parse('{"name":"SUS","children":[{"name":"HR","children":[{"name":"Netzwerk ERFA-Lernen","value":1000},{"name":"Steuerteam Lernen","value":1000},{"name":"Netzwerk SABA","value":1000},{"name":"ORG","children":[{"name":"peter","value":100,"relations":["Netzwerk SABA"]},{"name":"max","value":100,"relations":["Netzwerk ERFA-Lernen","Steuerteam BIC","HUB Absatz"]}]}]},{"name":"Verkauf","children":[{"name":"HUB Absatz","value":250}]},{"name":"PE","children":[{"name":"Steuerteam BIC","value":150},{"name":"Maier","value":100,"relations":["Steuerteam BIC","HUB Absatz","HUB Absatz"]},{"name":"Gerold","value":100,"relations":["Steuerteam BIC","HUB Absatz"]},{"name":"Schneider","value":100,"relations":["Netzwerk SABA"]},{"name":"Müller","value":100,"relations":["Netzwerk SABA","HUB Absatz"]}]},{"name":"Netzwerk Saba","value":250},{"name":"Lea","value":200}]}');var Qe=e(379),tr=e.n(Qe),nr=e(795),er=e.n(nr),rr=e(569),ir=e.n(rr),or=e(565),ar=e.n(or),ur=e(216),sr=e.n(ur),lr=e(589),cr=e.n(lr),fr=e(800),hr={};hr.styleTagTransform=cr(),hr.setAttributes=ar(),hr.insert=ir().bind(null,"head"),hr.domAPI=er(),hr.insertStyleElement=sr(),tr()(fr.Z,hr),fr.Z&&fr.Z.locals&&fr.Z.locals,Math.PI,Math.sqrt(5),Math.SQRT2,Math.sqrt(3);let pr=1e-6;const dr=-1/0,vr=1/0,yr=Object.freeze([dr,dr]),mr=Object.freeze([vr,vr]),gr=Object.freeze([1,1]),wr=Object.freeze([0,0]),_r=Object.freeze([1,0]),br=Object.freeze([0,1]),xr=(Object.freeze([dr,dr,dr]),Object.freeze([vr,vr,vr]),Object.freeze([1,1,1]),Object.freeze([0,0,0]),Object.freeze([1,0,0]),Object.freeze([0,1,0]),Object.freeze([0,0,1]),Object.freeze([dr,dr,dr,dr]),Object.freeze([vr,vr,vr,vr]),Object.freeze([1,1,1,1]),Object.freeze([0,0,0,0]),Object.freeze([1,0,0,0]),Object.freeze([0,1,0,0]),Object.freeze([0,0,1,0]),Object.freeze([0,0,0,1]),(t,n)=>null!=t&&"function"==typeof t[n]),Ar=Math.abs,Mr=(Math.max,(t,n,e=pr)=>Ar(t-n)<=e),kr=t=>null!=t&&"function"==typeof t[Symbol.iterator],Nr=(t,n)=>[t[0],t[1],n],Sr=Symbol(),Er=()=>{},$r=t=>xr(t,"xform")?t.xform():t;class Or{constructor(t){this.value=t}deref(){return this.value}}const jr=t=>t instanceof Or,Cr=t=>t instanceof Or?t.deref():t,zr=(t,n=(t=>void 0!==t?": "+t:""))=>class extends Error{constructor(e){super(t(e)+n(e))}},qr=zr((()=>"illegal arity")),Br=t=>{throw new qr(t)};function Ir(...t){const n=t[0],e=n[0],r=n[1],i=n[2],o=null==(t=(t=>2===t.length?[void 0,t[1]]:3===t.length?[t[1],t[2]]:Br(t.length))(t))[0]?e():t[0],a=t[1];return Cr(r(xr(a,"$reduce")?a.$reduce(i,o):null!=(u=a)&&"function"!=typeof u&&void 0!==u.length?Rr(i,o,a):Xr(i,o,a)));var u}const Rr=(t,n,e)=>{for(let r=0,i=e.length;r<i;r++)if(n=t(n,e[r]),jr(n)){n=n.deref();break}return n},Xr=(t,n,e)=>{for(let r of e)if(n=t(n,r),jr(n)){n=n.deref();break}return n},Pr=(t,n)=>[t,t=>t,n];function*Tr(t,n){const e=$r(t)([Er,Er,(t,n)=>n])[2];for(let t of n){let n=e(Sr,t);if(jr(n))return n=Cr(n.deref()),void(n!==Sr&&(yield n));n!==Sr&&(yield n)}}function Lr(t,n){return kr(n)?Tr(Lr(t),n):n=>{const e=n[2];return Nr(n,((n,r)=>e(n,t(r))))}}function Hr(t,n,e){return new Fr(t,n,e)}class Fr{constructor(t,n,e){void 0===t?(t=0,n=1/0):void 0===n&&(n=t,t=0),e=void 0===e?t<n?1:-1:e,this.from=t,this.to=n,this.step=e}*[Symbol.iterator](){let{from:t,to:n,step:e}=this;if(e>0)for(;t<n;)yield t,t+=e;else if(e<0)for(;t>n;)yield t,t+=e}$reduce(t,n){const e=this.step;if(e>0)for(let r=this.from,i=this.to;r<i&&!jr(n);r+=e)n=t(n,r);else for(let r=this.from,i=this.to;r>i&&!jr(n);r+=e)n=t(n,r);return n}}function Dr(...t){return Ur(Dr,Ir,t)}const Ur=(t,n,e)=>{let r,i;switch(e.length){case 4:i=e[3],r=e[2];break;case 3:i=e[2];break;case 2:return Lr((n=>t(e[0],e[1],n)));default:Br(e.length)}return n($r(e[0])(e[1]),r,i)};function Yr(...t){let[n,e,r,i,o,a,u,s,l,c]=t;switch(t.length){case 0:Br(0);case 1:return n;case 2:return(...t)=>n(e(...t));case 3:return(...t)=>n(e(r(...t)));case 4:return(...t)=>n(e(r(i(...t))));case 5:return(...t)=>n(e(r(i(o(...t)))));case 6:return(...t)=>n(e(r(i(o(a(...t))))));case 7:return(...t)=>n(e(r(i(o(a(u(...t)))))));case 8:return(...t)=>n(e(r(i(o(a(u(s(...t))))))));case 9:return(...t)=>n(e(r(i(o(a(u(s(l(...t)))))))));default:const f=(...t)=>n(e(r(i(o(a(u(s(l(c(...t))))))))));return 10===t.length?f:Yr(f,...t.slice(10))}}function Vr(...t){return t=t.map($r),Yr.apply(null,t)}function Zr(t,n){return kr(n)?function*(t,n){const e=$r(t)(Pr((()=>[]),((t,n)=>(t.push(n),t)))),r=e[1],i=e[2];for(let t of n){const n=i([],t);if(jr(n))return void(yield*Cr(r(n.deref())));n.length&&(yield*n)}yield*Cr(r([]))}(Zr(t),n):n=>{const e=n[2];let r=t;return Nr(n,((t,n)=>--r>0?e(t,n):0===r?(t=>t instanceof Or?t:new Or(t))(e(t,n)):(t=>new Or(t))(t)))}}function Jr(...t){return((t,n,e=Tr)=>{const r=n.length-1;return kr(n[r])?n.length>1?e(t.apply(null,n.slice(0,r)),n[r]):e(t(),n[0]):void 0})(Jr,t)||(n=>{const e=n[2],r=t[0];let i=t[1]||0;return Nr(n,((t,n)=>e(t,r(i++,n))))})}function Wr(t,n){t=t||"";let e=!0;return n?[...n].join(t):Pr((()=>""),((n,r)=>(n=e?n+r:n+t+r,e=!1,n)))}function*Gr(...t){const n=t.map((t=>t[Symbol.iterator]()));for(;;){const t=[];for(let e of n){let n=e.next();if(n.done)return;t.push(n.value)}yield t}}const Kr=([t,n])=>`${t}*${n}`,Qr=([t,n])=>`${t}=${n};`,ti=zr((()=>"unsupported operation")),ni=(t=0)=>{const n=new Array(5);let e;const r=(...r)=>{const i=n[r[t].length]||e;return i?i(...r):(t=>{throw new ti(t)})(`no impl for vec size ${r[t].length}`)};return r.add=(t,e)=>n[t]=e,r.default=t=>e=t,r.impl=t=>n[t]||e,r},ei="!o&&(o=[]);",ri=t=>Lr((t=>n=>n>1?`${t}[i${t}+${n}*s${t}]`:1==n?`${t}[i${t}+s${t}]`:`${t}[i${t}]`)(t),Hr()),ii=t=>Lr((n=>`${t}[${n}]`),Hr()),oi=(t,n,e,r="a",i="",o="",a="",u=!1)=>[o,Dr(Vr(Zr(t),Jr(((t,e)=>n(e,t)))),Wr(i),Gr.apply(null,e.split(",").map(u?ri:ii))),a,""!==r?`return ${r};`:""],ai=(t,n)=>`!${t} && (${t}=${n.split(",")[1]});`,ui=(t,n,e,r=e,i="a",o,a,u,s=!1)=>new Function(e,oi(t,n,r,i,o,a,u,s).join("")),si=(t,n,e=n,r="a",i,o,a=!1)=>new Function(n,((t,n,e="a",r,i,o=!1)=>[r,"for(let i=a.length;--i>=0;) {",t(n.split(",").map(o?t=>`${t}[i${t}+i*s${t}]`:t=>`${t}[i]`)),"}",i,null!==e?`return ${e};`:""])(t,e,r,i,o,a).join("")),li=(t,n,e=n,r,i,o)=>new Function(n,((t,n="o,a,b",e="o",r="!o&&(o=a);",i)=>[r,"while(k--\x3e0) {",t(n.split(",").map((t=>`${t}[i${t}+k*s${t}]`))),"}",i,null!==e?`return ${e};`:""])(t,e,r,i,o).join("")),ci=(t,n="o,a,b",e,r="o",i=1,o)=>{e=e||n,o=null!=o?o:ai(r,n);const a=ni(i),u=i=>a.add(i,ui(i,t,n,e,r,"",o));return a.default(si(t,n,e,r,o)),[a,u(2),u(3),u(4)]},fi=t=>ci((t=>([n,e,r])=>`${n}=${e}${t}${r};`)(t)),hi=t=>pi.add(t,((t,n,e,r,i,o=i,a="a",u="",s,l,c=!1)=>new Function(r,`return (${i})=>{${oi(t,e,o,a,u,s,l,c).join("")}}`)(...n))(t,[Mr,pr],(([t,n])=>`eq(${t},${n},eps)`),"eq,_eps","a,b,eps=_eps","a,b","","&&","return a.length === b.length && ",";")),pi=ni();pi.default(((t,n,e=pr)=>xr(t,"eqDelta")?t.eqDelta(n,e):xr(n,"eqDelta")?n.eqDelta(t,e):vi(t,n,t.length,e)));const di=hi(2),vi=(hi(3),hi(4),(t,n,e,r=pr,i=0,o=0,a=1,u=1)=>{for(;e>0;e--,i+=a,o+=u)if(!Mr(t[i],n[o],r))return!1;return!0}),yi=new Float64Array(1),mi=new Float32Array(yi.buffer),gi=(new Int32Array(yi.buffer),new Uint32Array(yi.buffer)),wi=(yi[0]=2,gi[1],(t,n)=>(t<<n|t>>>32-n)>>>0),_i=(t,n,e,r=!0,i=!0)=>{const o=e>0?r?function(){return this.buf[this.offset+e*this.stride]}:function(){return this.buf[this.offset+e]}:function(){return this.buf[this.offset]},a=e>0?r?function(t){this.buf[this.offset+e*this.stride]=t}:function(t){this.buf[this.offset+e]=t}:function(t){this.buf[this.offset]=t};i&&Object.defineProperty(t,e,{get:o,set:a,enumerable:!0}),Object.defineProperty(t,n,{get:o,set:a,enumerable:!0})};function bi(t,n){return!n&&(n={}),(...e)=>{const r=JSON.stringify(e);return void 0!==r?r in n?n[r]:n[r]=t.apply(null,e):t.apply(null,e)}}const xi=bi(((t,n)=>t.repeat(n))),Ai=bi(((t,n=" ")=>{const e=xi(String(n),t);return(n,r)=>null==n?e:(n=n.toString(),(r=void 0!==r?r:n.length)<t?e.substr(r)+n:n)})),Mi=(Ai(2,"0"),Ai(3,"0"),Ai(4,"0"),bi(((t,n=!1)=>n?n=>Si(n)||n.toFixed(t):n=>n.toFixed(t)))),ki=bi(((t,n=3)=>{const e=t-n-1,r=Math.pow(10,e),i=-Math.pow(10,e-1),o=Math.pow(10,-(n-1)),a=Ai(t);return e=>{const u=Math.abs(e);return a(Si(e)||(0===e?"0":u<o||u>=r?Ni(e,t):e.toFixed(n-(e<i?1:0))))}})),Ni=(t,n)=>t.toExponential(Math.max(n-4-(Math.log(Math.abs(t))/Math.LN10>=10?2:1)-(t<0?1:0),0)),Si=t=>isNaN(t)?"NaN":t===1/0?"+∞":t===-1/0?"-∞":void 0;let Ei=(t=>{const{prec:n,width:e,delim:r,wrap:i}=Object.assign({prec:3,delim:", ",wrap:"[]"},t),o=e?ki(e,n):Mi(n);return t=>{let n=[];for(let e of t)n.push(o(e));return`${i[0]}${n.join(r)}${i[1]}`}})();const[$i,Oi,ji,Ci]=((t,n="o,a,b",e="io=0,ia=0,ib=0,so=1,sa=1,sb=1",r="o,a,b",i="o",o,a=[2,3,4])=>[li(t,`${n},k,${e}`,r,i,o),...a.map((a=>ui(a,t,`${n},${e}`,r,i,"",null!=o?o:ai(i,n),"",!0)))])(Qr,"o,a","io=0,ia=0,so=1,sa=1","o,a","o",ei);class zi extends class{constructor(t,n=0,e=1){this.buf=t,this.offset=n,this.stride=e}toString(){return Ei(this)}}{constructor(t,n=0,e=1){super(t||[0,0],n,e)}static mapBuffer(t,n=t.length>>1,e=0,r=1,i=2){return((t,n,e,r,i,o)=>{const a=[];for(;--e>=0;)a.push(new t(n,r,i)),r+=o;return a})(zi,t,n,e,r,i)}static intoBuffer(t,n,e=0,r=1,i=2){return((t,n,e,r,i,o)=>{for(let a of e)t(n,a,r,0,i,1),r+=o;return n})(Oi,t,n,e,r,i)}static iterator(t,n,e=0,r=1,i=2){return function*(t,n,e,r,i,o){for(;e-- >0;)yield new t(n,r,i),r+=o}(zi,t,n,e,r,i)}[Symbol.iterator](){return function*(t,n,e,r){for(;n-- >0;)yield t[e],e+=r}(this.buf,2,this.offset,this.stride)}get length(){return 2}copy(){return new zi([this.x,this.y])}copyView(){return new zi(this.buf,this.offset,this.stride)}empty(){return new zi}eqDelta(t,n=pr){return di(this,t,n)}hash(){return((t,n=2654435761)=>{let e=-1;for(let a=t.length;--a>=0;)e=Math.imul(n,e)+(r=e,o=t[a],mi[0]=o,i=gi[0],i=Math.imul(wi(Math.imul(i,3432918353)>>>0,15),461845907)>>>0,3864292196+(Math.imul(wi(r^i,13),5)>>>0)>>>0)>>>0;var r,i,o;return e})(this)}toJSON(){return[this.x,this.y]}}var qi;zi.X_AXIS=new zi(_r),zi.Y_AXIS=new zi(br),zi.MIN=new zi(yr),zi.MAX=new zi(mr),zi.ZERO=new zi(wr),zi.ONE=new zi(gr),qi=zi.prototype,["x","y"].forEach(((t,n)=>_i(qi,t,n,undefined,undefined)));const Bi=(t=0,n=0)=>new zi([t,n]),[Ii,Ri,Xi,Pi]=fi("-"),Ti=t=>Li.add(t,ui(t,(([t])=>`${t}*${t}`),"a","a","","+","return ",";")),Li=ni();Li.default(si((([t])=>`sum+=${t}*${t};`),"a",void 0,"sum","let sum=0;")),Ti(2),Ti(3),Ti(4);const[Hi,Fi,Di,Ui]=ci((([t,n])=>`${t}=${n}*n;`),"o,a,n"),[Yi,Vi,Zi,Ji]=ci(Qr,"o,a",void 0,"o",1,ei),Wi=([t,n])=>`t=${t}-${n};s+=t*t;`,Gi="let t,s=0;",Ki=t=>Qi.add(t,ui(t,Wi,"a,b",void 0,"s","",Gi)),Qi=ni();Qi.default(si(Wi,"a,b",void 0,"s",Gi)),Ki(2),Ki(3),Ki(4);const to=(t,n)=>Math.sqrt(Qi(t,n)),no=t=>eo.add(t,ui(t,Kr,"a,b",void 0,"","+","return ",";")),eo=ni();eo.default(si((([t,n])=>`s+=${t}*${n};`),"a,b",void 0,"s","let s=0;")),no(2),no(3),no(4);const ro=(t,n)=>(e,r,i)=>{e?e!==r&&Yi(e,r):e=r;const o=Math.sin(i),a=Math.cos(i),u=r[t],s=r[n];return e[t]=u*a-s*o,e[n]=u*o+s*a,e},io=(ro(1,2),ro(2,0),ro(0,1)),[oo,ao,uo,so]=fi("+");function lo(t){return Array.isArray(t)?t:String(t).split(/[eE]/)}function co(t){const n=lo(t);if(!function(t){const n=lo(t);return!Number.isNaN(Number(n[1]))}(n))return n[0];const e="-"===n[0][0]?"-":"",r=n[0].replace(/^-/,"").split("."),i=r[0],o=r[1]||"";let a=Number(n[1]);if(0===a)return`${e+i}.${o}`;if(a<0){const t=i.length+a;if(t>0)return`${e+i.substr(0,t)}.${i.substr(t)}${o}`;{let n="0.";for(a=t;a;)n+="0",a+=1;return e+n+i+o}}{const t=o.length-a;if(t>0){const t=o.substr(a);return`${e+i+o.substr(0,a)}.${t}`}{let n=-t,r="";for(;n;)r+="0",n-=1;return e+i+o+r}}}var fo=function(t,n){var e=ho(t),r=Math.round(e*n)/n;return po(r)},ho=function(t){return t/(2*Math.PI)},po=function(t){return t>.5&&(t=.5),2*t*Math.PI},vo=function(t,n){return t[0]*n[1]-t[1]*n[0]},yo=function(){return yo=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},yo.apply(this,arguments)},mo=function(t,n,e){var r;void 0===e&&(e=500);try{r=[parseFloat(t.attr("width")),parseFloat(t.attr("height"))]}catch(t){return void console.log("zoom failed")}var i=r[0]/r[1],o=[0,0];r[0]<=r[1]?(o[0]=2*n.r,o[1]=o[0]*i):(o[1]=2*n.r,o[0]=o[1]*i);var a=[n.x-.5*o[0],n.y-.5*o[1]];t.transition().duration(e).attr("viewBox",a[0]+" "+a[1]+" "+o[0]+" "+o[1])},go=function(t,n,e,r,i){n.attr("fill",(function(t,n,e){return"#"+["003049","fcbf49","f77f00","d62828"][t.depth]})).style("opacity",wo.circle.opacity),e.transition().duration(250).attr("fill",wo.text.fill),r.attr("stroke-width",wo.relation.strokeWidth).attr("stroke",wo.relation.fill),i.transition().duration(250).attr("fill",wo.relation.fill),n.transition().duration(250).filter((function(t){return t.data.focus})).attr("fill","white").style("opacity",1),e.transition().duration(250).filter((function(t){return t.data.focus})).attr("fill","black"),r.transition().duration(250).filter((function(t){return t.some((function(t){if(t.data.focus)return!0}))})).attr("stroke-width",3)},wo={chart:{padding:20},relation:{fill:"#4472C4",strokeWidth:1},circle:{opacity:.75},text:{fill:"white"}};!function(t,n,e){var r=function(t,n,e){var r=Ne(t,(function(t){return t.children})).sum((function(t){return t.value})).sort((function(t,n){return n.value-t.value})),i=function(){var t=null,n=1,e=1,r=Ue;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Ze(t)).eachAfter(Je(r,.5)).eachBefore(We(1)):i.eachBefore(Ze(Ve)).eachAfter(Je(Ue,1)).eachAfter(Je(r,i.r/Math.min(n,e))).eachBefore(We(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=De(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Ye(+t),i):r},i}().size(n).padding(e);return i(r).descendants().map((function(t){return t.data=yo(yo({},t.data),{focus:!1}),t}))}(t,n,20),i=r[0],o=r[0],a=function(t){return new vt([[document.querySelector(t)]],[document.documentElement])}("body").append("svg").attr("width",n[0]).attr("height",n[1]).attr("viewBox","0 0 "+n[0]+" "+n[1]);a.append("defs").append("marker").attr("id","arrowhead").attr("markerWidth",8).attr("markerHeight",8).attr("refX",7).attr("refY",4).attr("orient","auto").append("polygon").attr("points","0 0, 8 4, 0 8");var u=a.append("g").selectAll("g").data(r).enter().append("g").attr("id",(function(t,n,e){return t.data.name})).attr("transform",(function(t,n,e){return"translate("+t.x+", "+t.y+")"})),s=u.append("circle").data(r).attr("r",(function(t,n,e){return t.r})),l=u.append("text").data(r).text((function(t,n,e){return t.data.name})).attr("transform",(function(t,n,e){return"translate(0,"+-.2*t.r+")"})).attr("text-anchor","middle").style("font-size",(function(t,n,e){return.25*t.r/(.01*t.data.name.length+1)})),c=function(t){var n=[];return t.forEach((function(e){e.data.relations&&e.data.relations.forEach((function(r){var i=t.find((function(t){return t.data.name==r}));if(null==i)throw new Error('DATA ERROR: Cannot find Node "'+r+'"');n.push([e,i])}))})),n}(r),f=a.append("g").selectAll("path").data(c).enter().append("path").attr("d",(function(t,n,e){return function(t,n,e,r,i){void 0===e&&(e=!0),void 0===r&&(r=8),void 0===i&&(i=200);var o=zi.X_AXIS,a=Bi(t.x,t.y),u=Bi(n.x,n.y),s=Ii([],u,a),l=((t,n,e=1)=>{!t&&(t=n);const r=(t=>Math.sqrt(Li(t)))(n);return r>=pr?Hi(t,n,e/r):t!==n?Yi(t,n):t})([],s),c=Hi([],l,-1),f=(to(zi.ZERO,s)-t.r-n.r)/2,h=Math.atan2(vo(o,l),eo(o,l)),p=Math.atan2(vo(o,c),eo(o,c));e&&to(zi.ZERO,s)>i&&(h=fo(h,r),p=fo(p,r));var d=io([],zi.X_AXIS,h),v=io([],zi.X_AXIS,p),y=Hi([],d,t.r),m=Hi([],v,n.r),g=Hi([],d,t.r+f),w=Hi([],v,n.r+f),_=oo([],a,y),b=oo([],u,m),x=oo([],a,g),A=oo([],u,w),M=[co(_[0]),co(_[1]),co(x[0]),co(x[1]),co(A[0]),co(A[1]),co(b[0]),co(b[1])];return"M"+M[0]+","+M[1]+" C"+M[2]+","+M[3]+" "+M[4]+","+M[5]+" "+M[6]+","+M[7]}({x:t[0].x,y:t[0].y,r:t[0].r},{x:t[1].x,y:t[1].y,r:t[1].r})})).attr("fill","transparent").attr("marker-end","url(#arrowhead)");go(0,s,l,f,a.select("defs").select("marker")),s.on("dblclick",(function(t,n){if(n){var e=n;e==o?(mo(a,i),o=i):(mo(a,e),o=e)}})).on("click",(function(t,n){n&&(r.forEach((function(t){t.data.focus=!1})),n.data.focus=!0,go(0,s,l,f,a.select("defs").select("marker")))}));var h=function(){a.attr("width",window.innerWidth).attr("height",window.innerHeight),mo(a,o,0)};window.addEventListener("resize",(function(){h()})),h()}(Ke,[1e3,1e3])}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return t[r](o,o.exports,e),o.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e(233)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,